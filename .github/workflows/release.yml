# Derived from:
#  - https://github.com/BurntSushi/ripgrep/blob/000015791742bb1280f1853adb714fdee1ba9f8e/.github/workflows/release.yml
#  - https://github.com/near/near-cli-rs/blob/a8679a3603015f1d651f874fdf0feff0d7514131/.github/workflows/release.yml
#  - https://github.com/sharkdp/bat/blob/7c847d84b0c3c97df6badfbb39d153ad93aec74e/.github/workflows/CICD.yml
#  - https://github.com/near/near-jsonrpc-client-rs/blob/2a9cce4710bb87592baf5d7ca7015e3d474584e9/.github/workflows/ci.yml

name: release

on:
  push:
    branches:
    # - master
    - ci/release-check
  workflow_dispatch:
    inputs:
      project-version:
        description: 'Version to release on GitHub'
        required: true
        type: string
      is-pre-release:
        description: 'Is this a pre-release?'
        required: true
        type: boolean

env:
  PROJECT_INDEX_URL: https://raw.githubusercontent.com/rust-lang/crates.io-index/master/2/zy
  RUST_BACKTRACE: 1 # Emit backtraces on panics.
    
jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ env.PROJECT_NAME }}
      project_version: ${{ env.PROJECT_VERSION }}
      is_prerelease: ${{ env.IS_PRERELEASE }}
      has_released: ${{ env.HAS_RELEASED }}
      publish_crate: ${{ env.HAS_RELEASED == 'false' && github.event_name != 'workflow_dispatch' }}
    env:
      HAS_RELEASED: false
      PROJECT_VERSION: ${{ github.event.inputs.project-version }}
      IS_PRERELEASE: ${{ github.event.inputs.is-pre-release }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get Project Name
      run: |
        PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)
        echo "Project Name: $PROJECT_NAME"

        if [[ "${PROJECT_INDEX_URL}" == *"${PROJECT_NAME}" ]]; then
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
        else
          echo "Project name does not match the index URL [${PROJECT_INDEX_URL}]."
          exit 1
        fi

    - name: Version Introspection
      if: env.PROJECT_VERSION == ''
      run: |
        PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
        echo "Project version: ${PROJECT_VERSION}"

        CRATE_VERSIONS=$(curl -s "${PROJECT_INDEX_URL}" | jq -r '.vers')
        echo "Already published versions:\n${CRATE_VERSIONS}"
        if echo "${CRATE_VERSIONS}" | grep -q "^${PROJECT_VERSION}$"; then
          echo "Project version [${PROJECT_VERSION}] has already been released."
          HAS_RELEASED=true
        else
          echo "Project version [${PROJECT_VERSION}] has not been released."
          HAS_RELEASED=false
        fi

        if [[ "${PROJECT_VERSION}" == *-* ]]; then
          echo "Project version [${PROJECT_VERSION}] is a pre-release."
          IS_PRERELEASE=true
        else
          echo "Project version [${PROJECT_VERSION}] is not a pre-release."
          IS_PRERELEASE=false
        fi

        echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
        echo "IS_PRERELEASE=${IS_PRERELEASE}" >> $GITHUB_ENV
        echo "HAS_RELEASED=${HAS_RELEASED}" >> $GITHUB_ENV

  crate:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.publish_crate == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install rust
      uses: dtolnay/rust-toolchain@stable

    - uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --dry-run
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  binary:
    name: binary (${{ matrix.job.name }})
    runs-on: ${{ matrix.job.os }}
    needs: check
    env:
      PROJECT_NAME: ${{ needs.check.outputs.project_name }}
      PROJECT_VERSION: v${{ needs.check.outputs.project_version }}
      RAW_PROJECT_VERSION: ${{ needs.check.outputs.project_version }}
      IS_PRERELEASE: ${{ needs.check.outputs.is_prerelease }}
      HAS_RELEASED: ${{ needs.check.outputs.has_released }}
      PUBLISH_CRATE: ${{ needs.check.outputs.publish_crate }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: 'linux-aarch64-gnu', target: aarch64-unknown-linux-gnu   , os: ubuntu-latest , use-cross: true }
          - { name: 'linux-arm-gnu'    , target: arm-unknown-linux-gnueabihf , os: ubuntu-latest , use-cross: true }
          - { name: 'linux-arm-musl'   , target: arm-unknown-linux-musleabihf, os: ubuntu-latest , use-cross: true }
          - { name: 'win32-msvc'       , target: i686-pc-windows-msvc        , os: windows-latest,                 }
          - { name: 'linux-i686-gnu'   , target: i686-unknown-linux-gnu      , os: ubuntu-latest , use-cross: true }
          - { name: 'linux-i686-musl'  , target: i686-unknown-linux-musl     , os: ubuntu-latest , use-cross: true }
          - { name: 'macos-x86_64'     , target: x86_64-apple-darwin         , os: macos-latest  ,                 }
          - { name: 'win64-gnu'        , target: x86_64-pc-windows-gnu       , os: windows-latest,                 }
          - { name: 'win64-msvc'       , target: x86_64-pc-windows-msvc      , os: windows-latest,                 }
          - { name: 'linux-x86_64-gnu' , target: x86_64-unknown-linux-gnu    , os: ubuntu-latest , use-cross: true }
          - { name: 'linux-x86_64-musl', target: x86_64-unknown-linux-musl   , os: ubuntu-latest , use-cross: true }

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # might be a simple `fetch-tags: true` option soon, see https://github.com/actions/checkout/pull/579
        fetch-depth: 0

    - name: Install prerequisites
      shell: bash
      run: |
        case ${{ matrix.job.target }} in
          arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
          aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
        esac

    - name: Install rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.job.target }}

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: build
        args: --verbose --locked --profile ci-build --target=${{ matrix.job.target }}

    - name: Strip debug information from executable
      id: strip
      shell: bash
      run: |
        # Figure out suffix of binary
        EXE_suffix=""
        case ${{ matrix.job.target }} in
          *-pc-windows-*) EXE_suffix=".exe" ;;
        esac

        # Figure out what strip tool to use if any
        STRIP="strip"
        case ${{ matrix.job.target }} in
          arm-unknown-linux-*) STRIP="arm-linux-gnueabihf-strip" ;;
          aarch64-unknown-linux-gnu) STRIP="aarch64-linux-gnu-strip" ;;
          *-pc-windows-msvc) STRIP="" ;;
        esac
        
        PROJECT_BIN_PATH="target/${{ matrix.job.target }}/ci-build/${{ env.PROJECT_NAME }}${EXE_suffix}"
        
        if [ -n "${STRIP}" ]; then
          "${STRIP}" "${PROJECT_BIN_PATH}"
        fi

        echo "PROJECT_BIN_PATH=${PROJECT_BIN_PATH}" >> $GITHUB_ENV

    - name: Build archive
      shell: bash
      run: |
        PKG_BASENAME="${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}-${{ matrix.job.target }}"
        mkdir "${PKG_BASENAME}"

        cp "${PROJECT_BIN_PATH}" "${PKG_BASENAME}/"
        cp README.md CHANGELOG.md LICENSE-MIT LICENSE-APACHE "${PKG_BASENAME}/"

        case ${{ matrix.job.target }} in
          *-pc-windows-*)
              PKG_PATH="${PKG_BASENAME}.zip"
              7z -y a "${PKG_PATH}" "${PKG_BASENAME}"/* | tail -2
            ;;
          *)
              PKG_PATH="${PKG_BASENAME}.tar.gz"
              tar czf "${PKG_PATH}" "${PKG_BASENAME}"/*
            ;;
        esac
        echo "PKG_PATH=${PKG_PATH}" >> $GITHUB_ENV

    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@c24866884b7a0d2fd2095be2e406b6f260479da8

    - name: Get contributors
      id: get-contributors
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        DEFAULT_RELEASE_NOTE="$(
          curl -v \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -H 'Authorization: token ${{ github.token }}' \
            -d '{"tag_name":"${{ env.PROJECT_VERSION }}","target_commitish":"${{ github.sha }}"}' \
          | jq .body
        )"
        echo "Default Release Note"
        echo "${DEFAULT_RELEASE_NOTE}"
        echo
        CONTRIBUTORS="$(
          <<< "${DEFAULT_RELEASE_NOTE}" \
          perl -ne 'print if s/.+ by (@[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}) in https.+$/\1/i' \
          | sort -u \
        )"
        echo "Contributors"
        echo "${CONTRIBUTORS}"
        echo
        PRETTY_CONTRIBUTOR_LIST="$(
          xargs <<< "${CONTRIBUTORS}" \
          | sed 's/ /, /g;s/\(.*\), \(.*\)$/\1 and \2/' \
        )"
        echo "Prettified Contributors"
        echo "${PRETTY_CONTRIBUTOR_LIST}"
        echo
        echo "PRETTY_CONTRIBUTOR_LIST=${PRETTY_CONTRIBUTOR_LIST}" >> $GITHUB_ENV

    - name: Check current latest tag
      shell: bash
      run: |
        export GIT_PREVIOUS_TAG="$(git describe --tags --abbrev=0 --match 'v[0-9]*.[0-9]*.[0-9]*')"
        echo "GIT_PREVIOUS_TAG=${GIT_PREVIOUS_TAG}" >> $GITHUB_ENV
        echo "Current latest git release tag is \"${GIT_PREVIOUS_TAG}\""

        if [ -n "${PRETTY_CONTRIBUTOR_LIST}" ]; then
          PRETTY_CONTRIBUTOR_LINE=" \
            <sup> \
              ðŸŽ‰  Thanks to ${{ env.PRETTY_CONTRIBUTOR_LIST }} for their contributions to this release. ðŸŽ‰ \
            </sup> \
          "
          echo "PRETTY_CONTRIBUTOR_LINE=${PRETTY_CONTRIBUTOR_LINE}" >> $GITHUB_ENV
        fi

        # if PUBLISH_CRATE is set to true, then we will publish the crate to crates.io
        if [[ "${{ env.PUBLISH_CRATE }}" == "true" ]]; then
          CRATE_LINE="**Crate Link**: https://crates.io/crates/${{ env.PROJECT_NAME }}/${{ env.RAW_PROJECT_VERSION }}"
          echo "CRATE_LINE=${CRATE_LINE}" >> $GITHUB_ENV
        fi

    - name: Publish archives and packages
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.PROJECT_VERSION }}
        prerelease: ${{ env.IS_PRERELEASE }}
        target_commitish: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.PKG_PATH }}
        body: |
          ## What's changed?
        
          ${{ steps.extract-release-notes.outputs.release_notes }}

          ${{ env.CRATE_LINE }}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ env.GIT_PREVIOUS_TAG }}...${{ env.PROJECT_VERSION }}

          ${{ env.PRETTY_CONTRIBUTOR_LINE }}
